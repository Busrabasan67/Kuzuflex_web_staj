import { Request, Response } from "express";
import AppDataSource from "../data-source";
import { Product } from "../entity/Product";
import { ProductTranslation } from "../entity/ProductTranslation";
import { ProductGroup } from "../entity/ProductGroup";
import { Catalog } from "../entity/Catalog";
import * as fs from "fs";
import * as path from "path";

// Dosya silme yardƒ±mcƒ± fonksiyonu
const deleteFileIfExists = (filePath: string) => {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log(`‚úÖ Dosya silindi: ${filePath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå Dosya silinirken hata: ${filePath}`, error);
    return false;
  }
};

// Dosya yolu olu≈üturma yardƒ±mcƒ± fonksiyonu
const getPublicFilePath = (relativePath: string) => {
  // __dirname: server/src/controllers
  // ƒ∞htiyacƒ±mƒ±z: server/public
  return path.join(__dirname, "../../public", relativePath);
};

// Belirli bir √ºr√ºn√ºn detayƒ±nƒ± √ßekmek i√ßin tasarlanmƒ±≈ü fonksiyondur.
export const getSubProduct = async (req: Request, res: Response) => {
  const groupId = parseInt(req.query.group as string);
  const subId = parseInt(req.query.sub as string);

  if (!groupId || !subId) {
    return res.status(400).json({ message: "Eksik parametre" });
  }

  try {
    const productRepo = AppDataSource.getRepository(Product);

    const product = await productRepo.findOne({
      where: { id: subId },
      relations: [
        "group",
        "translations",
        "catalogs",
        "catalogs.translations",
      ],
    });

    if (!product || product.group?.id !== groupId) {
      return res.status(404).json({ message: "Alt √ºr√ºn bulunamadƒ±" });
    }

    const lang = (req.query.lang as string) || "tr";
    const trTranslation = product.translations?.find((t) => t.language === lang);

    const catalogs = product.catalogs?.map((catalog) => {
      const translation = catalog.translations?.find((t) => t.language === lang);
      return {
        id: catalog.id,
        name: translation?.name || "Katalog",
        filePath: catalog.filePath,
      };
    }) || [];

  
   return res.json({
    id: product.id,
    slug: product.slug,
    groupId: product.group?.id || null,
    groupSlug: product.group?.slug || null,
    title: trTranslation?.title,
    description: trTranslation?.description,
    imageUrl: product.imageUrl,
    standard: product.standard,
    catalogs: catalogs, // varsa kataloglar
  });
  } catch (err) {
    console.error("Alt √ºr√ºn API hatasƒ±:", err);
    return res.status(500).json({ message: "Sunucu hatasƒ±" });
  }
};

// Slug bazlƒ± √ºr√ºn getirme (yeni sistem)
export const getProductBySlug = async (req: Request, res: Response) => {
  const { groupSlug, productSlug } = req.params;
  const lang = (req.query.lang as string) || "tr";

  try {
    const productRepo = AppDataSource.getRepository(Product);

    const product = await productRepo.findOne({
      where: { 
        slug: productSlug,
        group: { slug: groupSlug }
      },
      relations: [
        "group",
        "translations",
        "catalogs",
        "catalogs.translations",
      ],
    });

    if (!product) {
      return res.status(404).json({ message: "√úr√ºn bulunamadƒ±" });
    }

    const trTranslation = product.translations?.find((t) => t.language === lang);

    const catalogs = product.catalogs?.map((catalog) => {
      const translation = catalog.translations?.find((t) => t.language === lang);
      return {
        id: catalog.id,
        name: translation?.name || "Katalog",
        filePath: catalog.filePath,
      };
    }) || [];

    return res.json({
      id: product.id,
      slug: product.slug,
      groupId: product.group?.id || null,
      groupSlug: product.group?.slug || null,
      title: trTranslation?.title,
      description: trTranslation?.description,
      imageUrl: product.imageUrl,
      standard: product.standard,
      catalogs: catalogs,
    });
  } catch (err) {
    console.error("Slug bazlƒ± √ºr√ºn API hatasƒ±:", err);
    return res.status(500).json({ message: "Sunucu hatasƒ±" });
  }
};

// T√ºm √ºr√ºnleri listeleyen fonksiyon (admin paneli i√ßin)
export const getAllProducts = async (req: Request, res: Response) => {
  const lang = (req.query.lang as string) || "tr";
  const hasCatalog = req.query.hasCatalog === "true"; // Katalogu olan √ºr√ºnleri filtrele

  try {
    let query = AppDataSource.getRepository(Product)
      .createQueryBuilder("product")
      .leftJoinAndSelect("product.group", "group")
      .leftJoinAndSelect("group.translations", "groupTranslation", "groupTranslation.language = :lang", { lang })
      .leftJoinAndSelect("product.translations", "translation", "translation.language = :lang", { lang })
      .leftJoinAndSelect("product.catalogs", "catalog"); // Her zaman katalog bilgilerini al

    const products = await query.getMany();

    const result = products.map((product) => ({
      id: product.id,
      slug: product.slug,
      title: product.translations?.[0]?.title || "Ba≈ülƒ±k yok",
      description: product.translations?.[0]?.description || "A√ßƒ±klama yok",
      imageUrl: product.imageUrl,
      standard: product.standard,
      groupId: product.group?.id || null,
      groupSlug: product.group?.slug || null,
      groupName: product.group?.translations?.[0]?.name || "Grup yok",
      hasCatalog: product.catalogs && product.catalogs.length > 0,
      catalogCount: product.catalogs?.length || 0,
    }));

    // Eƒüer sadece katalogu olan √ºr√ºnler isteniyorsa filtrele
    const filteredResult = hasCatalog 
      ? result.filter(product => product.hasCatalog)
      : result;

    return res.status(200).json(filteredResult);
  } catch (err) {
    console.error("√úr√ºn listesi API hatasƒ±:", err);
    return res.status(500).json({ message: "Sunucu hatasƒ±" });
  }
};

// Tek alt √ºr√ºn getiren fonksiyon (d√ºzenleme i√ßin admin paneli i√ßin)
export const getProductById = async (req: Request, res: Response) => {
  try {
    const productId = parseInt(req.params.id);
    
    const productRepo = AppDataSource.getRepository(Product);
    const product = await productRepo.findOne({
      where: { id: productId },
      relations: ['translations', 'group', 'group.translations']
    });

    if (!product) {
      return res.status(404).json({ message: "√úr√ºn bulunamadƒ±." });
    }

    const result = {
      id: product.id,
      slug: product.slug, // SEO dostu URL slug'ƒ±
      imageUrl: product.imageUrl,
      standard: product.standard,
      groupId: product.group?.id || null,
      groupName: product.group?.translations?.[0]?.name || "Grup yok",
      translations: product.translations?.map(t => ({
        language: t.language,
        title: t.title,
        description: t.description
      })) || []
    };

    return res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå √úr√ºn getirme hatasƒ±:", error);
    return res.status(500).json({ message: "Sunucu hatasƒ±." });
  }
};

// Alt √ºr√ºn g√ºncelleme fonksiyonu
export const updateProduct = async (req: Request, res: Response) => {
  try {
    const productId = parseInt(req.params.id);
    console.log("üì• Gelen g√ºncelleme verisi:", req.body, "ID:", productId);

    if (!req.body) {
      return res.status(400).json({ message: "Form verileri alƒ±namadƒ±." });
    }

    const { imageUrl, standard, groupId, translations, slug } = req.body;

    // üîí G√ºvenli parse
    let parsedTranslations;
    try {
      parsedTranslations = typeof translations === 'string' ? JSON.parse(translations) : translations;
    } catch (error) {
      console.error("‚ùå Translations parse hatasƒ±:", error);
      return res.status(400).json({ message: "√áeviri verileri hatalƒ± format." });
    }

    // Validasyon
    if (!parsedTranslations || !Array.isArray(parsedTranslations)) {
      return res.status(400).json({ message: "√áeviri verileri eksik veya hatalƒ±." });
    }

    if (!groupId) {
      return res.status(400).json({ message: "√úst kategori se√ßimi zorunludur." });
    }

    // Mevcut √ºr√ºn√º bul
    const productRepo = AppDataSource.getRepository(Product);
    const product = await productRepo.findOne({ 
      where: { id: productId },
      relations: ['translations', 'group']
    });

    if (!product) {
      return res.status(404).json({ message: "√úr√ºn bulunamadƒ±." });
    }

    // √úst kategori kontrol√º
    const productGroupRepo = AppDataSource.getRepository(ProductGroup);
    const group = await productGroupRepo.findOne({ where: { id: groupId } });
    if (!group) {
      return res.status(400).json({ message: "Se√ßilen √ºst kategori bulunamadƒ±." });
    }

    // Eski resmi sil (eƒüer yeni resim y√ºklendiyse)
    if (product.imageUrl && product.imageUrl !== imageUrl) {
      const oldImagePath = getPublicFilePath(product.imageUrl);
      deleteFileIfExists(oldImagePath);
    }

    // √úr√ºn bilgilerini g√ºncelle
    product.imageUrl = imageUrl || product.imageUrl; // Resim deƒüi≈ümediyse eskisini kullan
    product.standard = standard || null;
    product.slug = slug;
    product.group = group;

    // √úr√ºn√º kaydet
    const savedProduct = await productRepo.save(product);

    // Mevcut √ßevirileri sil
    const translationRepo = AppDataSource.getRepository(ProductTranslation);
    await translationRepo.delete({ product: { id: productId } });

    // Yeni √ßevirileri olu≈ütur ve kaydet
    const translationPromises = parsedTranslations.map((translation: any) => {
      const newTranslation = new ProductTranslation();
      newTranslation.language = translation.language;
      newTranslation.title = translation.title;
      newTranslation.description = translation.description;
      newTranslation.product = savedProduct;
      return translationRepo.save(newTranslation);
    });

    await Promise.all(translationPromises);

    console.log("‚úÖ Alt √ºr√ºn ba≈üarƒ±yla g√ºncellendi:", savedProduct.id);
    return res.status(200).json({
      message: "Alt √ºr√ºn ba≈üarƒ±yla g√ºncellendi.",
      productId: savedProduct.id
    });

  } catch (error) {
    console.error("‚ùå Alt √ºr√ºn g√ºncelleme hatasƒ±:", error);
    return res.status(500).json({ message: "Sunucu hatasƒ±." });
  }
};

// Alt √ºr√ºn silme fonksiyonu
export const deleteProduct = async (req: Request, res: Response) => {
  try {
    const productId = parseInt(req.params.id);
    
    const productRepo = AppDataSource.getRepository(Product);
    const product = await productRepo.findOne({
      where: { id: productId },
      relations: ['translations', 'catalogs']
    });

    if (!product) {
      return res.status(404).json({ message: "√úr√ºn bulunamadƒ±." });
    }

    // Kataloglarƒ± ve dosyalarƒ±nƒ± sil
    if (product.catalogs && product.catalogs.length > 0) {
      console.log(`üóëÔ∏è ${product.catalogs.length} adet katalog silinecek`);
      
      for (const catalog of product.catalogs) {
        if (catalog.filePath) {
          const catalogFilePath = getPublicFilePath(catalog.filePath);
          deleteFileIfExists(catalogFilePath);
        }
      }
      
      // Kataloglarƒ± sil (CASCADE ile √ßevirileri de silinir)
      const catalogRepo = AppDataSource.getRepository(Catalog);
      await catalogRepo.remove(product.catalogs);
      
      console.log("‚úÖ Kataloglar silindi");
    }

    // √úr√ºn resmini sil
    if (product.imageUrl) {
      const productImagePath = getPublicFilePath(product.imageUrl);
      deleteFileIfExists(productImagePath);
    }

    // √úr√ºn√º sil (CASCADE olduƒüu i√ßin √ßeviriler de silinir)
    await productRepo.remove(product);

    console.log("‚úÖ Alt √ºr√ºn ba≈üarƒ±yla silindi:", productId);
    return res.status(200).json({
      message: "Alt √ºr√ºn ba≈üarƒ±yla silindi."
    });

  } catch (error) {
    console.error("‚ùå Alt √ºr√ºn silme hatasƒ±:", error);
    return res.status(500).json({ message: "Sunucu hatasƒ±." });
  }
};

// Alt √ºr√ºn ekleme fonksiyonu
export const createProduct = async (req: Request, res: Response) => {
  try {
    console.log("üì• Gelen body:", req.body);

    if (!req.body) {
      return res.status(400).json({ message: "Form verileri alƒ±namadƒ±." });
    }

    const { imageUrl, standard, groupId, translations, slug } = req.body;

    // üîí G√ºvenli parse
    let parsedTranslations;
    try {
      parsedTranslations = typeof translations === 'string' ? JSON.parse(translations) : translations;
    } catch (error) {
      console.error("‚ùå Translations parse hatasƒ±:", error);
      return res.status(400).json({ message: "√áeviri verileri hatalƒ± format." });
    }

    // Validasyon
    if (!parsedTranslations || !Array.isArray(parsedTranslations)) {
      return res.status(400).json({ message: "√áeviri verileri eksik veya hatalƒ±." });
    }

    if (!groupId) {
      return res.status(400).json({ message: "√úst kategori se√ßimi zorunludur." });
    }

    // √úst kategori kontrol√º
    const productGroupRepo = AppDataSource.getRepository(ProductGroup);
    const group = await productGroupRepo.findOne({ where: { id: groupId } });
    if (!group) {
      return res.status(400).json({ message: "Se√ßilen √ºst kategori bulunamadƒ±." });
    }

    // Yeni √ºr√ºn olu≈ütur
    const productRepo = AppDataSource.getRepository(Product);
    const newProduct = new Product();
    newProduct.imageUrl = imageUrl || null;
    newProduct.standard = standard || null;
    newProduct.slug = slug;
    newProduct.group = group;

    // √úr√ºn√º kaydet
    const savedProduct = await productRepo.save(newProduct);

    // √áevirileri olu≈ütur ve kaydet
    const translationRepo = AppDataSource.getRepository(ProductTranslation);
    const translationPromises = parsedTranslations.map((translation: any) => {
      const newTranslation = new ProductTranslation();
      newTranslation.language = translation.language;
      newTranslation.title = translation.title;
      newTranslation.description = translation.description;
      newTranslation.product = savedProduct;
      return translationRepo.save(newTranslation);
    });

    await Promise.all(translationPromises);

    console.log("‚úÖ Alt √ºr√ºn ba≈üarƒ±yla eklendi:", savedProduct.id);
    return res.status(201).json({
      message: "Alt √ºr√ºn ba≈üarƒ±yla eklendi.",
      productId: savedProduct.id
    });

  } catch (error) {
    console.error("‚ùå Alt √ºr√ºn ekleme hatasƒ±:", error);
    return res.status(500).json({ message: "Sunucu hatasƒ±." });
  }
};
