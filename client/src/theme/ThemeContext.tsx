import React, { createContext, useState, useEffect } from "react"; // createContext , Uygulama geneline veri aktarÄ±mÄ±nÄ± saÄŸlayacak context'i oluÅŸturur.
//useState: Dark mode aÃ§Ä±k mÄ± kapalÄ± mÄ± onu tutar.
//useEffect: Dark mode deÄŸiÅŸtiÄŸinde localStorage'a kaydeder.


//Context Tipi TanÄ±mÄ± (Context'in iÃ§eriÄŸini tanÄ±mlar)
//Bu bir TypeScript arayÃ¼zÃ¼ (interface). Context iÃ§inde hangi veri ve fonksiyonlar olacaÄŸÄ±nÄ± tanÄ±mlar:
//darkMode: ÅŸu anda karanlÄ±k mod aÃ§Ä±k mÄ± (true/false)
//setDarkMode: darkMode deÄŸerini deÄŸiÅŸtiren fonksiyon
// Bu sayede context kullanÄ±lÄ±rken tip gÃ¼venliÄŸi olur. TypeScript sayesinde hatalarÄ± daha derlemede fark edersin.
interface ThemeContextType {
  darkMode: boolean;
  setDarkMode: (value: boolean) => void;
}

//Context Nesnesi OluÅŸturuluyor
//ThemeContext adlÄ± bir context oluÅŸturur.
//BaÅŸlangÄ±Ã§ deÄŸeri: darkMode: false ve boÅŸ bir setDarkMode fonksiyonu.
//GerÃ§ekte kullanÄ±lacak deÄŸer, Provider tarafÄ±ndan geÃ§ilecek (aÅŸaÄŸÄ±da).

export const ThemeContext = createContext<ThemeContextType>({
  darkMode: false,
  setDarkMode: () => {},
});

//ThemeProvider: Context'i kullanabilmek iÃ§in bir Provider oluÅŸturur.
//Bu bileÅŸen tÃ¼m uygulamayÄ± sarmalayacak.
//children: iÃ§ine sarÄ±lan JSX bileÅŸenler (Ã¶rneÄŸin <App />).
//children: Context'i kullanacak olan bileÅŸenleri iÃ§erir.
//darkMode: localStorage'dan okunan deÄŸer.
//setDarkMode: darkMode deÄŸerini deÄŸiÅŸtiren fonksiyon.
//useEffect: darkMode deÄŸiÅŸtiÄŸinde localStorage'a kaydeder.

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  //State BaÅŸlangÄ±cÄ± ve localStorage Okuma
  const [darkMode, setDarkMode] = useState(() => {
    const stored = localStorage.getItem("darkMode"); ///Sayfa aÃ§Ä±ldÄ±ÄŸÄ±nda ilk deÄŸer localStorage'dan okunur.
    return stored ? JSON.parse(stored) : false; //KayÄ±t yoksa false yani light mode olur.
  });

  useEffect(() => { //Dark Mode Class ve localStorage GÃ¼ncellemesi
    localStorage.setItem("darkMode", JSON.stringify(darkMode)); //darkMode deÄŸiÅŸtiÄŸinde localStorage'a kaydeder.
    if (darkMode) {
      document.documentElement.classList.add("dark"); //dark mode aÃ§Ä±ldÄ±ÄŸÄ±nda dark class eklenir.
    } else {
      document.documentElement.classList.remove("dark");  //light mode aÃ§Ä±ldÄ±ÄŸÄ±nda dark class silinir.
    }
  }, [darkMode]); 
   //Bu useEffect ÅŸunu yapar: darkMode her deÄŸiÅŸtiÄŸinde:
  //localStorage'a gÃ¼ncel deÄŸer yazÄ±lÄ±r.
  //<html> elementine dark class'Ä± eklenir veya kaldÄ±rÄ±lÄ±r
  //ğŸ“Œ Tailwind'de darkMode: 'class' olduÄŸu iÃ§in bu class sayfada karanlÄ±k modun Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlar.
  
  
//Context SaÄŸlayÄ±cÄ± Return
//ThemeContext.Provider ile context tÃ¼m Ã§ocuk bileÅŸenlere sunulur
//value iÃ§inde darkMode deÄŸeri ve setDarkMode fonksiyonu paylaÅŸÄ±lÄ±r
//ArtÄ±k uygulamanÄ±n her yerinde useContext(ThemeContext) ile bu deÄŸerlere ulaÅŸabilirsin.

  return (
    <ThemeContext.Provider value={{ darkMode, setDarkMode }}>
      {children}
    </ThemeContext.Provider>
  );
}; 